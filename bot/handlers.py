from aiogram.handlers import BaseHandler
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
from django.conf import settings

from .utils import RegistrationForm, ChatState
from .keyboards import confirm_button, request_phone_keyboard, st_data_keyboard, students_inline_keyboard_builder, get_main_menu_keyboard, subjects_inline_keyboard_builder, teachers_inline_keyboard_builder, about_center_inline_keyboard
from .database import get_user, add_user
from .helpers import get_students, get_enrollments, get_enrollment_balance, get_student, get_enrollment_attendance_list, get_subjects, get_subject_teachers, get_teacher_info
from .messages import about_center_text

router = Router()

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    kb = await get_main_menu_keyboard(message.from_user.id)
    hour = datetime.now().hour
    if 5 <= hour < 12:
        greeting = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
    elif 12 <= hour < 18:
        greeting = "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
    elif 18 <= hour < 23:
        greeting = "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
    else:
        greeting = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
    await message.answer(f"{greeting} –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å ‚ú®", reply_markup=kb)
    await state.set_state(ChatState.main_menu)

@router.message(Command('help'))
async def start(message: Message, state: FSMContext):
    kb = await get_main_menu_keyboard(message.from_user.id)
    await message.answer(text="‚ÑπÔ∏è –û –±–æ—Ç–µ\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n‚Ä¢ üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ –æ–ø–ª–∞—Ç–µ –æ–±—É—á–µ–Ω–∏—è\n‚Ä¢ ‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π\n‚Ä¢ üè´ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞—à–µ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ: –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ Telegram –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –±–∞–∑–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.", reply_markup=kb)
    await state.set_state(ChatState.main_menu)

@router.message(F.text == "üè´ –û —Ü–µ–Ω—Ç—Ä–µ")
async def about_center(message: Message, state: FSMContext):
    kb = about_center_inline_keyboard()
    file_path = os.path.join(settings.STATIC_ROOT, 'img/center-img.jpg')
    photo = FSInputFile(file_path)
    await message.answer_photo(photo=photo, caption=str(about_center_text), parse_mode="HTML", reply_markup=kb)
    await state.set_state(ChatState.main_menu)

@router.message(F.text == "üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def get_materials(message: Message, state: FSMContext):
    await message.answer(text='–°–∫–æ—Ä–æ ...')

@router.message(F.text == 'üßë‚Äçüè´ –£—á–∏—Ç–µ–ª—è')
async def staff(message: Message, state: FSMContext):
    subjects = await get_subjects()
    data = []
    for subject in subjects:
        text = f'{subject["name"]}'
        callback_data = f'get_teachers_subject_{subject["id"]}'
        data.append({'text':text, 'callback_data':callback_data})
    kb = subjects_inline_keyboard_builder(data)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', reply_markup=kb)

@router.callback_query(F.data.startswith("get_teachers_subject"))
async def callback_subject_teachers(call: CallbackQuery, state: FSMContext):
    subject_id = call.data.split("_")[-1]
    teachers = await get_subject_teachers(subject_id)
    if teachers and len(teachers) > 0:
        data = []
        for teacher in teachers:
            text = f'{teacher["fname"]} {teacher["lname"]}'
            callback_data = f'get_teacher_{teacher["id"]}'
            data.append({'text': text, 'callback_data': callback_data})

        kb = teachers_inline_keyboard_builder(data)
        await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è:', reply_markup=kb)
        await call.message.delete()
    else:
        await call.message.answer(text="‚ùå –ù–µ—Ç –£—á–∏—Ç–µ–ª–µ–π")

    await call.answer()

@router.callback_query(F.data.startswith("get_teacher"))
async def callback_teacher_info(call: CallbackQuery, state: FSMContext):
    teacher_id = call.data.split("_")[-1]
    teacher = await get_teacher_info(teacher_id)

    if teacher:
        caption = f'<b>{teacher["fname"]} {teacher["lname"]}</b>\n\n{teacher["bio"]}'

        file_path = os.path.join(settings.MEDIA_ROOT, str(teacher['image']))
        photo = FSInputFile(file_path)

        await call.message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    else:
        await call.message.answer(text="‚ùó –£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await call.answer()


@router.message(F.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext):
    kb = await get_main_menu_keyboard(message.from_user.id)
    await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)
    await state.set_state(ChatState.main_menu)

@router.message(F.text == 'üóÇÔ∏è –î–∞–Ω–Ω—ã–µ –£—á–µ–Ω–∏–∫–∞')
async def st_info_menu(message: Message, state: FSMContext):
    await  message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=st_data_keyboard)
    await state.set_state(ChatState.student_info)

@router.message(F.text == 'üîë –í–æ–π—Ç–∏', ChatState.main_menu)
async def sign_in(message: Message, state: FSMContext):

    user = await get_user(message.from_user.id)

    if user:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=st_data_keyboard)
        await state.set_state(ChatState.student_info)
    else:
        await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
                             reply_markup=request_phone_keyboard)
        await state.set_state(RegistrationForm.get_phone)



@router.message(F.contact, RegistrationForm.get_phone)
async def get_contact(message: Message, state: FSMContext):
    contact = message.contact
    phone_number = contact.phone_number
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number

    if contact.user_id != message.from_user.id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¢–µ–ª–µ–≥—Ä–∞–º.")
        return

    students = await get_students(phone_number)

    if not students:
        kb = await get_main_menu_keyboard(message.from_user.id)
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=kb)
        await state.set_state(ChatState.main_menu)
        return

    await message.answer(text=f"–ù–∞–π–¥–µ–Ω–æ:\n\n{'\n'.join(['{id}. {fname} {lname}'.format(id=st['id'], fname=st['fname'], lname=st['lname']) for st in students])}")

    await state.update_data(
        phone_number=phone_number,
        first_name=contact.first_name,
        last_name=contact.last_name,
        user_id = contact.user_id
    )

    await message.answer(
        text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ ?",
        reply_markup=confirm_button
    )
    await state.set_state(RegistrationForm.confirm)


@router.message(F.text.in_(['–î–∞', '–ù–µ—Ç', '‚úÖ –î–∞', '‚ùå –ù–µ—Ç']), RegistrationForm.confirm)
async def confirm_contact(message: Message, state: FSMContext   ):
    data = await state.get_data()
    main_kb = await get_main_menu_keyboard(message.from_user.id)
    contact = {
        'phone_number' : data.get("phone_number"),
        'first_name' : data.get("first_name"),
        'last_name' : data.get("last_name"),
        'user_id' : data.get("user_id")
    }

    if message.text in ['‚úÖ –î–∞', '–î–∞']:
        user = await add_user(contact, message.from_user)
        if user:
            await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ä–∏—Ä–æ–≤–∞–Ω—ã üéâ", reply_markup=st_data_keyboard)
            await state.set_state(ChatState.student_info)
        else:
            await message.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚õî", reply_markup=main_kb)
    else:
            await message.answer(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", reply_markup=main_kb)

    await state.clear()

@router.message(ChatState.student_info, F.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
async def get_balance(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:
        students = await get_students(user['phone_number'])

        if students and len(students) == 1:
            student = students[0]
            enrollments = await get_enrollments(student['id'])
            text = f"{student['fname']} {student['lname']}\n\n"
            if enrollments:
                rows = []
                for enrollment in enrollments:
                    balance = await get_enrollment_balance(enrollment['id'])
                    t = f"{enrollment['course']}\n‚è≥ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {balance['payed_due'].strftime('%m/%d/%Y') if balance['payed_due'] else '---'}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance['balance']}"
                    rows.append(t)

                text += '\n----\n'.join(rows)
                await message.answer(text=text)
            else:
                await message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")
        elif  students and len(students) > 1:
            kb_data = []
            for student in students:
                text = f"{student['fname']} {student['lname']}"
                callback_data = f'get_balance_{student["id"]}'
                kb_data.append({'text': text, 'callback_data':callback_data})
            kb = students_inline_keyboard_builder(kb_data)

            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞: ", reply_markup=kb)
        else:
            kb = await get_main_menu_keyboard(message.from_user.id)
            await message.answer("‚ùó–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=kb)
    else:
        kb = await get_main_menu_keyboard(message.from_user.id)
        await message.answer(text='–û—à–∏–±–∫–∞‚ùó\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', reply_markup=kb)


@router.callback_query(F.data.startswith("get_balance"))
async def callback_st_balance(call: CallbackQuery):
    user = await get_user(call.from_user.id)
    if user:
        st_id = call.data.split("_")[-1]
        student = await get_student(st_id)
        if student:
            enrollments = await get_enrollments(student['id'])
            text = f"{student['fname']} {student['lname']}\n\n"
            if enrollments:
                rows = []
                for enrollment in enrollments:
                    balance = await get_enrollment_balance(enrollment['id'])
                    t = f"{enrollment['course']}\n‚è≥ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {balance['payed_due'].strftime('%m/%d/%Y') if balance['payed_due'] else '---'}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance['balance']}"
                    rows.append(t)

                text += '\n----\n'.join(rows)
                await call.message.answer(text=text)
            else:
                await call.message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")
        else:
            await call.message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await call.message.delete()
    else:
        kb = await get_main_menu_keyboard(call.from_user.id)
        await call.message.answer(text='–û—à–∏–±–∫–∞‚ùó\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', reply_markup=kb)


@router.message(ChatState.student_info, F.text == 'üìÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ')
async def get_attendance(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:
        students = await get_students(user['phone_number'])

        if students and len(students) == 1:
            student = students[0]
            enrollments = await get_enrollments(student['id'])
            text = f"{student['fname']} {student['lname']}\n\n"
            if enrollments:
                rows = []
                for enrollment in enrollments:
                    attendance_list = await get_enrollment_attendance_list(enrollment['id'])
                    t = f"{enrollment['course']}\n"
                    for attendance in attendance_list:
                        t += f'üóì{attendance['date'].strftime('%m/%d/%Y')} -> {attendance["status"]}\n'

                    rows.append(t)

                text += '\n----\n'.join(rows)
                await message.answer(text=text)
            else:
                await message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")

        elif  students and len(students) > 1:
            kb_data = []
            for student in students:
                text = f"{student['fname']} {student['lname']}"
                callback_data = f'get_attendance_{student["id"]}'
                kb_data.append({'text': text, 'callback_data':callback_data})
            kb = students_inline_keyboard_builder(kb_data)

            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ü–æ—Å–µ—â–µ–Ω–∏—è: ", reply_markup=kb)
    else:
        kb = await get_main_menu_keyboard(message.from_user.id)
        await message.answer(text='–û—à–∏–±–∫–∞‚ùó\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', reply_markup=kb)

@router.callback_query(F.data.startswith("get_attendance"))
async def callback_st_attendance(call: CallbackQuery, state: FSMContext):
    user = await get_user(call.from_user.id)
    if user:
        st_id = call.data.split("_")[-1]
        student = await get_student(st_id)
        if student:
            enrollments = await get_enrollments(student['id'])
            text = f"{student['fname']} {student['lname']}\n\n"
            if enrollments:
                rows = []
                for enrollment in enrollments:
                    attendance_list = await get_enrollment_attendance_list(enrollment['id'])
                    t = f"{enrollment['course']}\n"
                    for attendance in attendance_list:
                        t += f'üóì{attendance['date'].strftime('%m/%d/%Y')} -> {attendance["status"]}\n'

                    rows.append(t)

                text += '\n----\n'.join(rows)
                await call.message.answer(text=text)
            else:
                await call.message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")
        else:
            await call.message.answer("‚ùó –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await call.message.delete()
    else:
        kb = await get_main_menu_keyboard(call.from_user.id)
        await call.message.answer(text='–û—à–∏–±–∫–∞‚ùó\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', reply_markup=kb)
